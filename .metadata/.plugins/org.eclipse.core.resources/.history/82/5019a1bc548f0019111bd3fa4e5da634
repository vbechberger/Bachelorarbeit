package genetic;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

import util.SaveCopy;

/**
 * This class represents the cycle crossover(Oliver et al., 1987), which focuses 
 * on subsets of cities that occupy the same subset of positions in both parents. .
 * 
 * @author vbechberger
 *
 */
public class ChrossoverCycleX extends CrossoverRandomSubset {
	

	public ChrossoverCycleX(Chromosome firstParent, Chromosome secondParent) {
		super(firstParent, secondParent);
	}

	protected Chromosome doCrossover(int[] parent1, int[] parent2) {
		
		HashMap<Integer, Integer> elements = findElemSamePos(parent1, parent2);
		
		
		
		return new Chromosome(arrKid);
	}
	
	private HashMap<Integer, Integer> findCycle(int[] parent1, int[] parent2) {
		
		ArrayList<Integer> parent1List = new ArrayList<Integer>();
		ArrayList<Integer> parent2List = new ArrayList<Integer>();
		
		//the hash map with the elements which have the same indices in both parents
		//Map: the city number -> its index in the parents
		HashMap<Integer, Integer> elements = new HashMap<Integer, Integer>();
		
		SaveCopy.copy(parent1List, parent1);
		SaveCopy.copy(parent2List, parent1);
		
		//start with the first element of the first parent
		//find a cycle till we find this element in the second parent
		int firstElemPar1 = parent1[0];
		elements.put(firstElemPar1, 0);
		
		int elem = parent2[0];
		while(elem!= firstElemPar1) {			
			int index = parent1List.indexOf(elem);
			elements.put(elem, index);
			
			elem = parent2[index];			
		}
		
		
		return elements;
	}
	
}
