package genetic;

import java.util.ArrayList;

import util.SaveCopy;

/**
 * This class represents the cycle crossover, which focuses on subsets of cities
 * that occupy the same subset of positions in both parents. These cities are
 * copied from the first parent to the offspring at exactly the same positions
 * and the remaining positions are filled with the cities from the second
 * parent.
 * 
 * @author vbechberger
 *
 */
public class ChrossoverCycleX extends CrossoverRandomSubset {
	
	//TODO:CHECK that starts with 1!!!!!!!!!!
	private int firstCityNr = 1;

	public ChrossoverCycleX(Chromosome firstParent, Chromosome secondParent) {
		super(firstParent, secondParent);
	}

	protected Chromosome doCrossover(int[] parent1, int[] parent2) {
		// TODO Auto-generated method stub
		return null;
	}
	
	private ArrayList<Integer> findElemSamePos(int[] parent1, int[] parent2) {
		
		ArrayList<Integer> parent1List = new ArrayList<Integer>();
		ArrayList<Integer> parent2List = new ArrayList<Integer>();
		
		//the list with the elements which have the same indices in both parents
		ArrayList<Integer> elements = new ArrayList<Integer>();
		
		SaveCopy.copy(parent1List, parent1);
		SaveCopy.copy(parent2List, parent1);
		
		if (firstCityNr == -1) {
			throw new IllegalStateException("The number of the first city is not given!");
		}
		
		for (int i = firstCityNr; i < parent1.length + 1; i++) {
			if (parent1List.indexOf(i) == parent2List.indexOf(i)) {
				elements.add(i);				
			}
		}		
		return elements;
	}
	
	private 
	
	

}
